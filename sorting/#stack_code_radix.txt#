    #include <stdio.h>
    #define BINS 16
    #define GROUP 4

    int main(int argc, const char *argv[])
    {
    	int mask = 0xf;
    	int i, j;
    	int list[] = {0x65c6, 0xbeb, 0x96ba, 0x9a7d};
    	int buffer[GROUP];
    	int *temp, *src_ptr, *dest_ptr;
    	int cnt[BINS];
    	int map[BINS];
    	map[0] = 0;

	//init pointers to the list of unsorted numbers and temp buffer
    	src_ptr = list;
    	dest_ptr = buffer;
    
    	//print unsorted list
    	putchar('\n');
    	printf("unsorted list: \n");
    	for(i = 0; i < GROUP; i++) 
    		printf("int: %d hex: 0x%x ", src_ptr[i], src_ptr[i]);
    	putchar('\n');
    
    	j = 0;
    	while(j < GROUP)
    	{
    		//initalize the count
    		for(i = 0; i < BINS; i++)
    			cnt[i] = 0;
    		
    		//count significant digits. shifting i * group # of times
    		for(i = 0; i < GROUP; i++)
    			cnt[(src_ptr[i] >> i*GROUP) & mask]++;
    
    		//initalize the map
    		map[0] = 0;
    		for(i = 0; i < BINS; i++)
    			map[i] = 0;
    
    		//compute the map
    		for(i = 1; i < BINS; i++)
    		{
    			map[i] = (map[i - 1] + cnt[i - 1]);
    		}
    
    		//shift the elements in buffer[] and list[] via their pointers. 
    		//shifting i * group # of times
    		for(i = 0; i < GROUP; i++)
    		{
    			dest_ptr[map[(src_ptr[i] >> i*GROUP) & mask]++] = src_ptr[i];
    		}
    
    		//perform a swap of list[] and buffer[] via their pointers
    		temp = src_ptr;
    		src_ptr = dest_ptr;
    		dest_ptr = src_ptr;
    	
    		j++;
    	}
    
    	//print list for reference
    	putchar('\n');
    	printf("sorted list: \n");
    	for(i = 0; i < GROUP; i++) 
    		printf("int: %d hex: 0x%x ", src_ptr[i], src_ptr[i]);
    	putchar('\n');
    	
    	//print buffer
    	putchar('\n');
    	printf("sorted buffer: \n");
    	for(i = 0; i < GROUP; i++) 
    		printf("int: %d hex: 0x%x ", dest_ptr[i], dest_ptr[i]);
    	putchar('\n');
    
    	return 0;
}    
